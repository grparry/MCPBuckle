using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using MCPBuckle.Configuration;
using MCPBuckle.Models;

namespace MCPBuckle.Services
{
    /// <summary>
    /// Service for generating MCP context from ASP.NET Core controllers and actions.
    /// </summary>
    public class McpContextGenerator
    {
        private readonly IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;
        private readonly XmlDocumentationService _xmlDocumentationService;
        private readonly TypeSchemaGenerator _typeSchemaGenerator;
        private readonly ILogger<McpContextGenerator> _logger;
        private readonly McpBuckleOptions _options;
        private McpContext? _cachedContext;

        /// <summary>
        /// Initializes a new instance of the <see cref="McpContextGenerator"/> class.
        /// </summary>
        /// <param name="actionDescriptorCollectionProvider">The action descriptor collection provider.</param>
        /// <param name="xmlDocumentationService">The XML documentation service.</param>
        /// <param name="typeSchemaGenerator">The type schema generator.</param>
        /// <param name="logger">The logger.</param>
        /// <param name="options">The MCPBuckle options.</param>
        public McpContextGenerator(
            IActionDescriptorCollectionProvider actionDescriptorCollectionProvider,
            XmlDocumentationService xmlDocumentationService,
            TypeSchemaGenerator typeSchemaGenerator,
            ILogger<McpContextGenerator> logger,
            IOptions<McpBuckleOptions> options)
        {
            _actionDescriptorCollectionProvider = actionDescriptorCollectionProvider;
            _xmlDocumentationService = xmlDocumentationService;
            _typeSchemaGenerator = typeSchemaGenerator;
            _logger = logger;
            _options = options.Value;
        }

        /// <summary>
        /// Generates an MCP context from the application's controllers and actions.
        /// </summary>
        /// <returns>The generated MCP context.</returns>
        public McpContext GenerateContext()
        {
            // Return cached context if available
            if (_cachedContext != null)
            {
                return _cachedContext;
            }

            _logger.LogInformation("Generating MCP context");

            try
            {
                var controllerDiscovery = new ControllerDiscoveryService(
                    _actionDescriptorCollectionProvider,
                    _xmlDocumentationService,
                    _typeSchemaGenerator,
                    Options.Create(_options));

                var tools = controllerDiscovery.DiscoverTools();

                // Create metadata dictionary starting with default values
                var metadata = new Dictionary<string, object>
                {
                    ["title"] = AppDomain.CurrentDomain.FriendlyName,
                    ["description"] = "API generated by MCPBuckle",
                    ["version"] = "1.0.0",
                    ["generator"] = "MCPBuckle"
                };

                // Add any custom metadata from options
                foreach (var item in _options.Metadata)
                {
                    metadata[item.Key] = item.Value;
                }

                _cachedContext = new McpContext
                {
                    Tools = tools,
                    Metadata = metadata
                };

                _logger.LogInformation($"Generated MCP context with {tools.Count} tools");

                return _cachedContext;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating MCP context");
                throw;
            }
        }

        /// <summary>
        /// Invalidates the cached MCP context, forcing it to be regenerated on the next call to GenerateContext.
        /// </summary>
        public void InvalidateCache()
        {
            _logger.LogInformation("Invalidating MCP context cache");
            _cachedContext = null;
        }
    }
}
