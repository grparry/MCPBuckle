using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using MCPBuckle.Configuration;
using MCPBuckle.Models;

namespace MCPBuckle.Services
{
    /// <summary>
    /// Service for generating MCP context from ASP.NET Core controllers and actions.
    /// </summary>
    public class McpContextGenerator : IContextGenerator
    {
        private readonly IControllerDiscoveryService _controllerDiscoveryService;
        private readonly ILogger<McpContextGenerator> _logger;
        private readonly McpBuckleOptions _options;
        private McpContext? _cachedContext;

        /// <summary>
        /// Initializes a new instance of the <see cref="McpContextGenerator"/> class.
        /// </summary>
        /// <param name="controllerDiscoveryService">The controller discovery service.</param>
        /// <param name="logger">The logger.</param>
        /// <param name="options">The MCPBuckle options.</param>
        public McpContextGenerator(
            IControllerDiscoveryService controllerDiscoveryService,
            ILogger<McpContextGenerator> logger,
            IOptions<McpBuckleOptions> options)
        {
            _controllerDiscoveryService = controllerDiscoveryService;
            _logger = logger;
            _options = options.Value;
        }

        /// <summary>
        /// Generates an MCP context from the application's controllers and actions.
        /// </summary>
        /// <returns>The generated MCP context.</returns>
        public McpContext GenerateContext()
        {
            // Return cached context if available
            if (_cachedContext != null)
            {
                return _cachedContext;
            }

            _logger.LogInformation("Generating MCP context");

            try
            {
                // Validate required parameters
                ValidateRequiredParameters();
                
                // Use the injected controller discovery service
                var tools = _controllerDiscoveryService.DiscoverTools();

                // Create metadata dictionary starting with default values
                var metadata = new Dictionary<string, object>
                {
                    ["title"] = AppDomain.CurrentDomain.FriendlyName,
                    ["description"] = "API generated by MCPBuckle",
                    ["version"] = "1.0.0",
                    ["generator"] = "MCPBuckle"
                };

                // Add any custom metadata from options
                foreach (var item in _options.Metadata)
                {
                    metadata[item.Key] = item.Value;
                }

                _cachedContext = new McpContext
                {
                    Info = new McpInfo
                    {
                        SchemaVersion = _options.SchemaVersion,
                        Title = _options.ServerTitle,
                        Description = _options.ServerDescription
                    },
                    Tools = tools,
                    Metadata = metadata
                };

                _logger.LogInformation($"Generated MCP context with {tools.Count} tools");

                return _cachedContext;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error generating MCP context");
                throw;
            }
        }

        /// <summary>
        /// Invalidates the cached MCP context, forcing it to be regenerated on the next call to GenerateContext.
        /// </summary>
        public void InvalidateCache()
        {
            _logger.LogInformation("Invalidating MCP context cache");
            _cachedContext = null;
        }

        /// <summary>
        /// Validates that all required parameters are set in the options.
        /// </summary>
        /// <exception cref="InvalidOperationException">Thrown when a required parameter is missing.</exception>
        private void ValidateRequiredParameters()
        {
            if (string.IsNullOrWhiteSpace(_options.SchemaVersion))
            {
                throw new InvalidOperationException("The MCP schema version is required. Set it in McpBuckleOptions.SchemaVersion.");
            }

            if (string.IsNullOrWhiteSpace(_options.ServerTitle))
            {
                throw new InvalidOperationException("The MCP server title is required. Set it in McpBuckleOptions.ServerTitle.");
            }
        }
    }
}
